"use strict";const{app:t,BrowserWindow:m,ipcMain:p}=require("electron"),l=require("path"),w=require("fs"),g=require("http");t.disableHardwareAcceleration();t.commandLine.appendSwitch("disable-software-rasterizer");t.commandLine.appendSwitch("disable-gpu");t.commandLine.appendSwitch("disable-gpu-compositing");t.commandLine.appendSwitch("disable-gpu-sandbox");const u=async(r,e=1e4)=>{const n=Date.now();for(console.log(`Waiting for file: ${r}`);Date.now()-n<e;){if(w.existsSync(r)){const o=w.readFileSync(r,"utf-8");return console.log(`File found with content: ${o}`),o}await new Promise(o=>setTimeout(o,100))}throw new Error(`Timeout waiting for ${r}`)},v=r=>new Promise(e=>{const n=g.get(r,o=>{e(o.statusCode===200),o.resume()});n.on("error",()=>{e(!1)}),n.end()});function d(){console.log("Creating window...");const r=process.env.NODE_ENV==="development"?l.join(process.cwd(),"dist/electron/preload.js"):l.join(__dirname,"preload.js");console.log("Preload script path:",r);const e=new m({width:1200,height:800,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:r,webSecurity:!0,sandbox:!0,webgl:!1}});if(e.webContents.on("did-fail-load",(n,o,s)=>{console.error("Failed to load page:",s),e.reload()}),e.webContents.on("render-process-gone",(n,o)=>{console.error("Render process gone:",o.reason),o.reason==="crashed"&&(e.destroy(),d())}),e.webContents.on("did-finish-load",()=>{console.log("Window finished loading"),e.webContents.executeJavaScript(`
      try {
        const memoryServiceAvailable = !!(window.electronAPI && window.electronAPI.memory);
        console.log('Memory service available:', memoryServiceAvailable);
        if (!memoryServiceAvailable) {
          console.error('Memory service not available in renderer process');
        }
        return memoryServiceAvailable;
      } catch (error) {
        console.error('Error checking memory service:', error);
        return false;
      }
    `).then(n=>{n||(console.error("Memory service check failed or service unavailable"),e.webContents.send("service-status",{memory:n}))}).catch(n=>{console.error("Failed to check memory service:",n)})}),process.env.NODE_ENV==="development")console.log("Running in development mode"),setTimeout(async()=>{try{const o=l.join(process.cwd(),".vite-port");console.log("Looking for port file at:",o);const i=`http://localhost:${(await u(o)).trim()}`;if(console.log("Development server URL:",i),!await(async(a=5)=>{for(;a>0;){try{if(console.log(`Attempting to connect to ${i} (${a} retries left)`),await v(i))return console.log("Successfully connected to development server"),!0}catch(c){console.log("Connection attempt failed:",c)}await new Promise(c=>setTimeout(c,1e3)),a--}return!1})())throw new Error("Failed to connect to development server after 5 attempts");console.log("Loading URL in window:",i),await e.loadURL(i),e.webContents.openDevTools()}catch(o){const s=o instanceof Error?o:new Error(String(o));console.error("Development server connection error:",s),e.isDestroyed()||e.webContents.send("dev-server-error",s.message),t.quit()}},1e3);else{console.log("Running in production mode");const n=l.join(__dirname,"../index.html");console.log("Loading file:",n),e.loadFile(n)}e.on("closed",()=>{console.log("Window closed"),e.destroy()})}p.handle("mcp:use-tool",async(r,e)=>{const{server_name:n,tool_name:o,arguments:s}=e;return console.log(`MCP tool request: ${n}/${o}`,s),null});t.whenReady().then(()=>{console.log("App is ready, creating window..."),d()});t.on("window-all-closed",()=>{console.log("All windows closed"),process.platform!=="darwin"&&t.quit()});t.on("activate",()=>{console.log("App activated"),m.getAllWindows().length===0&&d()});
