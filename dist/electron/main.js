"use strict";const _=require("electron"),S=require("path"),b=require("fs"),F=require("os"),U=require("crypto"),K=require("http"),q=require("https"),B=require("url"),L=require("util");function j(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var w={exports:{}};const W="16.5.0",J={version:W};var $;function z(){if($)return w.exports;$=1;const t=b,r=S,l=F,n=U,i=J.version,h=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function E(e){const o={};let c=e.toString();c=c.replace(/\r\n?/mg,`
`);let p;for(;(p=h.exec(c))!=null;){const g=p[1];let s=p[2]||"";s=s.trim();const a=s[0];s=s.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),a==='"'&&(s=s.replace(/\\n/g,`
`),s=s.replace(/\\r/g,"\r")),o[g]=s}return o}function A(e){const o=T(e),c=d.configDotenv({path:o});if(!c.parsed){const a=new Error(`MISSING_DATA: Cannot parse ${o} for an unknown reason`);throw a.code="MISSING_DATA",a}const p=O(e).split(","),g=p.length;let s;for(let a=0;a<g;a++)try{const u=p[a].trim(),M=C(c,u);s=d.decrypt(M.ciphertext,M.key);break}catch(u){if(a+1>=g)throw u}return d.parse(s)}function f(e){console.log(`[dotenv@${i}][WARN] ${e}`)}function P(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}function O(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function C(e,o){let c;try{c=new URL(o)}catch(u){if(u.code==="ERR_INVALID_URL"){const M=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw M.code="INVALID_DOTENV_KEY",M}throw u}const p=c.password;if(!p){const u=new Error("INVALID_DOTENV_KEY: Missing key part");throw u.code="INVALID_DOTENV_KEY",u}const g=c.searchParams.get("environment");if(!g){const u=new Error("INVALID_DOTENV_KEY: Missing environment part");throw u.code="INVALID_DOTENV_KEY",u}const s=`DOTENV_VAULT_${g.toUpperCase()}`,a=e.parsed[s];if(!a){const u=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw u.code="NOT_FOUND_DOTENV_ENVIRONMENT",u}return{ciphertext:a,key:p}}function T(e){let o=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const c of e.path)t.existsSync(c)&&(o=c.endsWith(".vault")?c:`${c}.vault`);else o=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else o=r.resolve(process.cwd(),".env.vault");return t.existsSync(o)?o:null}function y(e){return e[0]==="~"?r.join(l.homedir(),e.slice(1)):e}function N(e){!!(e&&e.debug)&&P("Loading env from encrypted .env.vault");const c=d._parseVault(e);let p=process.env;return e&&e.processEnv!=null&&(p=e.processEnv),d.populate(p,c,e),{parsed:c}}function H(e){const o=r.resolve(process.cwd(),".env");let c="utf8";const p=!!(e&&e.debug);e&&e.encoding?c=e.encoding:p&&P("No encoding is specified. UTF-8 is used by default");let g=[o];if(e&&e.path)if(!Array.isArray(e.path))g=[y(e.path)];else{g=[];for(const M of e.path)g.push(y(M))}let s;const a={};for(const M of g)try{const V=d.parse(t.readFileSync(M,{encoding:c}));d.populate(a,V,e)}catch(V){p&&P(`Failed to load ${M} ${V.message}`),s=V}let u=process.env;return e&&e.processEnv!=null&&(u=e.processEnv),d.populate(u,a,e),s?{parsed:a,error:s}:{parsed:a}}function m(e){if(O(e).length===0)return d.configDotenv(e);const o=T(e);return o?d._configVault(e):(f(`You set DOTENV_KEY but you are missing a .env.vault file at ${o}. Did you forget to build it?`),d.configDotenv(e))}function R(e,o){const c=Buffer.from(o.slice(-64),"hex");let p=Buffer.from(e,"base64");const g=p.subarray(0,12),s=p.subarray(-16);p=p.subarray(12,-16);try{const a=n.createDecipheriv("aes-256-gcm",c,g);return a.setAuthTag(s),`${a.update(p)}${a.final()}`}catch(a){const u=a instanceof RangeError,M=a.message==="Invalid key length",V=a.message==="Unsupported state or unable to authenticate data";if(u||M){const D=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw D.code="INVALID_DOTENV_KEY",D}else if(V){const D=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw D.code="DECRYPTION_FAILED",D}else throw a}}function I(e,o,c={}){const p=!!(c&&c.debug),g=!!(c&&c.override);if(typeof o!="object"){const s=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw s.code="OBJECT_REQUIRED",s}for(const s of Object.keys(o))Object.prototype.hasOwnProperty.call(e,s)?(g===!0&&(e[s]=o[s]),p&&P(g===!0?`"${s}" is already defined and WAS overwritten`:`"${s}" is already defined and was NOT overwritten`)):e[s]=o[s]}const d={configDotenv:H,_configVault:N,_parseVault:A,config:m,decrypt:R,parse:E,populate:I};return w.exports.configDotenv=d.configDotenv,w.exports._configVault=d._configVault,w.exports._parseVault=d._parseVault,w.exports.config=d.config,w.exports.decrypt=d.decrypt,w.exports.parse=d.parse,w.exports.populate=d.populate,w.exports=d,w.exports}var G=z();const Q=j(G);async function X(t,r=3e4){const l=Date.now();for(;Date.now()-l<r;){try{if(b.existsSync(t)){const n=b.readFileSync(t,"utf-8");if(n.trim())return console.log(`File found: ${t}, content: ${n.trim()}`),n}}catch(n){console.log(`Error reading file ${t}:`,n)}await new Promise(n=>setTimeout(n,500))}throw new Error(`File ${t} not found or empty after ${r}ms`)}async function Z(t){return new Promise(r=>{try{const v=(new B.URL(t).protocol==="https:"?q:K).get(t,i=>{console.log(`Server check: ${t} responded with status ${i.statusCode}`),r(i.statusCode!==void 0&&i.statusCode<500),v.destroy()});v.on("error",i=>{console.log(`Server check error for ${t}:`,i.message),r(!1),v.destroy()}),v.setTimeout(5e3,()=>{console.log(`Server check timeout for ${t}`),r(!1),v.destroy()})}catch(l){console.log(`Server check failed for ${t}:`,l),r(!1)}})}function Y(){console.log("Creating window...");const t=process.env.NODE_ENV==="development"?S.join(process.cwd(),"dist/electron/preload.js"):S.join(__dirname,"preload.js");console.log("Preload script path:",t);const r=new _.BrowserWindow({width:1200,height:800,title:"Memory Dashboard",webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:t,webSecurity:!0,sandbox:!0,webgl:!1,additionalArguments:[`--memory-service-path=${process.env.VITE_MEMORY_SERVICE_PATH}`,`--memory-chroma-path=${process.env.VITE_MEMORY_CHROMA_PATH}`,`--memory-backups-path=${process.env.VITE_MEMORY_BACKUPS_PATH}`,`--claude-config-path=${process.env.VITE_CLAUDE_CONFIG_PATH}`]}});if(console.log("Environment variables:",{VITE_MEMORY_SERVICE_PATH:process.env.VITE_MEMORY_SERVICE_PATH,VITE_MEMORY_CHROMA_PATH:process.env.VITE_MEMORY_CHROMA_PATH,VITE_MEMORY_BACKUPS_PATH:process.env.VITE_MEMORY_BACKUPS_PATH,VITE_CLAUDE_CONFIG_PATH:process.env.VITE_CLAUDE_CONFIG_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH}),r.webContents.on("did-fail-load",(l,n,v)=>{console.error("Failed to load page:",v),r.reload()}),r.webContents.on("render-process-gone",(l,n)=>{console.error("Render process gone:",n.reason),n.reason==="crashed"&&(r.destroy(),Y())}),r.webContents.on("did-finish-load",async()=>{console.log("Window finished loading"),await(async(v=3)=>{for(let i=0;i<v;i++)try{console.log(`Attempt ${i+1} to connect to memory service...`);const h=await r.webContents.executeJavaScript(`
            if (window.electronAPI && window.electronAPI.memory) {
              const health = await window.electronAPI.memory.check_database_health();
              console.log('Memory service health:', health);
              return health;
            } else {
              throw new Error('Memory API not available');
            }
          `);return console.log("Memory service connection successful:",h),!0}catch(h){console.error(`Memory service connection attempt ${i+1} failed:`,h),await new Promise(E=>setTimeout(E,2e3))}return!1})()||(console.error("Failed to connect to memory service after multiple attempts"),r.webContents.send("memory-service-error","Failed to connect to memory service"))}),process.env.NODE_ENV==="development")console.log("Running in development mode"),setTimeout(async()=>{try{const n=S.join(process.cwd(),".vite-port");console.log("Looking for port file at:",n);const i=`http://localhost:${(await X(n)).trim()}`;if(console.log("Development server URL:",i),!await(async(A=5)=>{for(;A>0;){try{if(console.log(`Attempting to connect to ${i} (${A} retries left)`),await Z(i))return console.log("Successfully connected to development server"),!0}catch(f){console.log("Connection attempt failed:",f)}await new Promise(f=>setTimeout(f,1e3)),A--}return!1})())throw new Error("Failed to connect to development server after 5 attempts");console.log("Loading URL in window:",i),await r.loadURL(i)}catch(n){const v=n instanceof Error?n:new Error(String(n));console.error("Development server connection error:",v),r.isDestroyed()||r.webContents.send("dev-server-error",v.message),_.app.quit()}},1e3);else{console.log("Running in production mode");const l=S.join(__dirname,"../index.html");console.log("Loading file:",l),r.loadFile(l)}r.on("closed",()=>{console.log("Window closed"),r.destroy()}),r.webContents.on("before-input-event",(l,n)=>{n.control&&n.shift&&n.key.toLowerCase()==="i"&&r.webContents.toggleDevTools(),n.key==="F12"&&r.webContents.toggleDevTools()})}const x=S.join(process.cwd(),".env");console.log("Loading environment variables from:",x);const k=Q.config({path:x});k.error?console.error("Error loading .env file:",k.error):(console.log("Environment variables loaded successfully"),process.env.MCP_MEMORY_CHROMA_PATH=process.env.VITE_MEMORY_CHROMA_PATH,process.env.MCP_MEMORY_BACKUPS_PATH=process.env.VITE_MEMORY_BACKUPS_PATH,console.log("Set MCP environment variables:",{MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH}));_.app.disableHardwareAcceleration();_.app.commandLine.appendSwitch("disable-software-rasterizer");_.app.commandLine.appendSwitch("disable-gpu");_.app.commandLine.appendSwitch("disable-gpu-compositing");_.app.commandLine.appendSwitch("disable-gpu-sandbox");const ee=L.promisify(b.readFile),oe=L.promisify(b.exists);_.ipcMain.handle("fs:readFile",async(t,{path:r,options:l})=>{try{return console.log("Main process reading file:",r),await ee(r,l)}catch(n){throw console.error("Main process readFile error:",n),n}});_.ipcMain.handle("fs:exists",async(t,{path:r})=>{try{return console.log("Main process checking file exists:",r),await oe(r)}catch(l){return console.error("Main process exists error:",l),!1}});_.ipcMain.handle("mcp:use-tool",async(t,r)=>{const{server_name:l,tool_name:n,arguments:v}=r;console.log(`Forwarding MCP tool request: ${l}/${n}`,{args:v,cwd:process.cwd()});try{const i=process.env.VITE_CLAUDE_CONFIG_PATH;if(!i)throw new Error(`VITE_CLAUDE_CONFIG_PATH environment variable not set. Available env vars: ${Object.keys(process.env).filter(O=>O.startsWith("VITE_")).join(", ")}`);console.log("Reading MCP config from:",i);const h=JSON.parse(b.readFileSync(i,"utf-8"));console.log("Available MCP servers:",Object.keys(h.mcpServers));const E=h.mcpServers[l];if(!E)throw new Error(`MCP server "${l}" not found in configuration. Available servers: ${Object.keys(h.mcpServers).join(", ")}`);const{spawn:A}=require("child_process");console.log("Spawning MCP server process:",{command:E.command,args:E.args,cwd:process.env.VITE_MEMORY_SERVICE_PATH,env:Object.keys({...process.env,...E.env})});const f=A(E.command,E.args,{env:{...process.env,...E.env,PYTHONPATH:process.env.VITE_MEMORY_SERVICE_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH||process.env.VITE_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH||process.env.VITE_MEMORY_BACKUPS_PATH},cwd:process.env.VITE_MEMORY_SERVICE_PATH,stdio:["pipe","pipe","pipe"]});console.log("MCP server process spawned with:",{pid:f.pid,command:E.command,args:E.args,cwd:process.env.VITE_MEMORY_SERVICE_PATH,env:{PYTHONPATH:process.env.VITE_MEMORY_SERVICE_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH||process.env.VITE_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH||process.env.VITE_MEMORY_BACKUPS_PATH}});const P={jsonrpc:"2.0",method:"initialize",params:{protocolVersion:"2024-11-05",capabilities:{tools:{}},clientInfo:{name:"mcp-memory-dashboard",version:"0.1.0"}},id:1};return console.log("Sending MCP initialize request:",P),f.stdin.write(JSON.stringify(P)+`
`),new Promise((O,C)=>{let T="",y=!1,N=!1;const H={jsonrpc:"2.0",method:"tools/call",params:{name:n,arguments:v},id:2};f.stdout.on("data",m=>{const R=m.toString();console.log("Raw MCP server response:",R),T+=R;const I=T.split(`
`);for(let d=0;d<I.length-1;d++){const e=I[d].trim();if(!(!e||N))try{const o=JSON.parse(e);if(console.log("Parsed MCP response:",o),o.jsonrpc==="2.0"&&typeof o.id<"u"){if(o.id===1&&!y){if(o.error){console.error("MCP initialization failed:",o.error),C(new Error(o.error.message||JSON.stringify(o.error))),f.kill();return}console.log("MCP initialization successful:",o.result),y=!0;const c={jsonrpc:"2.0",method:"notifications/initialized"};console.log("Sending initialized notification:",c),f.stdin.write(JSON.stringify(c)+`
`),console.log("Sending tool request:",H),f.stdin.write(JSON.stringify(H)+`
`);continue}if(o.id===2&&y){N=!0,o.error?(console.error("MCP tool call failed:",o.error),C(new Error(o.error.message||JSON.stringify(o.error)))):(console.log("MCP tool call successful:",o.result),O(o.result)),f.kill();return}}}catch{console.log("Non-JSON line (probably diagnostic):",e)}}T=I[I.length-1]}),f.stderr.on("data",m=>{console.error("MCP server stderr:",m.toString())}),f.on("error",m=>{console.error("Failed to start MCP server:",m),C(new Error(`Failed to start MCP server: ${m.message}`))}),f.on("exit",(m,R)=>{m!==0&&m!==null&&(console.error(`MCP server exited with code ${m}, signal ${R}`),C(new Error(`MCP server exited with code ${m}`)))}),setTimeout(()=>{N||(console.error("MCP server request timed out after 60 seconds"),console.error("Init complete:",y),console.error("Final accumulated response:",T),f.kill(),C(new Error("MCP server request timed out")))},6e4)})}catch(i){throw console.error("Error handling MCP tool request:",i instanceof Error?i.message:i),i}});_.app.whenReady().then(()=>{console.log("App is ready, creating window..."),Y()});_.app.on("window-all-closed",()=>{console.log("All windows closed"),process.platform!=="darwin"&&_.app.quit()});_.app.on("activate",()=>{console.log("App activated"),_.BrowserWindow.getAllWindows().length===0&&Y()});const re=_.app.requestSingleInstanceLock();re?_.app.on("second-instance",()=>{const t=_.BrowserWindow.getAllWindows()[0];t&&(t.isMinimized()&&t.restore(),t.focus())}):_.app.quit();
