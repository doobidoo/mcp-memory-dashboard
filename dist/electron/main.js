"use strict";const l=require("electron"),g=require("path"),E=require("fs"),F=require("os"),U=require("crypto"),x=require("http"),K=require("https"),B=require("url"),H=require("util");function q(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var f={exports:{}};const j="16.5.0",W={version:j},R=E,I=g,J=F,z=U,G=W,Y=G.version,Q=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function X(e){const o={};let t=e.toString();t=t.replace(/\r\n?/mg,`
`);let n;for(;(n=Q.exec(t))!=null;){const c=n[1];let r=n[2]||"";r=r.trim();const s=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),s==='"'&&(r=r.replace(/\\n/g,`
`),r=r.replace(/\\r/g,"\r")),o[c]=r}return o}function Z(e){const o=k(e),t=d.configDotenv({path:o});if(!t.parsed){const s=new Error(`MISSING_DATA: Cannot parse ${o} for an unknown reason`);throw s.code="MISSING_DATA",s}const n=$(e).split(","),c=n.length;let r;for(let s=0;s<c;s++)try{const i=n[s].trim(),p=oe(t,i);r=d.decrypt(p.ciphertext,p.key);break}catch(i){if(s+1>=c)throw i}return d.parse(r)}function ee(e){console.log(`[dotenv@${Y}][WARN] ${e}`)}function M(e){console.log(`[dotenv@${Y}][DEBUG] ${e}`)}function $(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function oe(e,o){let t;try{t=new URL(o)}catch(i){if(i.code==="ERR_INVALID_URL"){const p=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw p.code="INVALID_DOTENV_KEY",p}throw i}const n=t.password;if(!n){const i=new Error("INVALID_DOTENV_KEY: Missing key part");throw i.code="INVALID_DOTENV_KEY",i}const c=t.searchParams.get("environment");if(!c){const i=new Error("INVALID_DOTENV_KEY: Missing environment part");throw i.code="INVALID_DOTENV_KEY",i}const r=`DOTENV_VAULT_${c.toUpperCase()}`,s=e.parsed[r];if(!s){const i=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${r} in your .env.vault file.`);throw i.code="NOT_FOUND_DOTENV_ENVIRONMENT",i}return{ciphertext:s,key:n}}function k(e){let o=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const t of e.path)R.existsSync(t)&&(o=t.endsWith(".vault")?t:`${t}.vault`);else o=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else o=I.resolve(process.cwd(),".env.vault");return R.existsSync(o)?o:null}function N(e){return e[0]==="~"?I.join(J.homedir(),e.slice(1)):e}function re(e){!!(e&&e.debug)&&M("Loading env from encrypted .env.vault");const t=d._parseVault(e);let n=process.env;return e&&e.processEnv!=null&&(n=e.processEnv),d.populate(n,t,e),{parsed:t}}function ne(e){const o=I.resolve(process.cwd(),".env");let t="utf8";const n=!!(e&&e.debug);e&&e.encoding?t=e.encoding:n&&M("No encoding is specified. UTF-8 is used by default");let c=[o];if(e&&e.path)if(!Array.isArray(e.path))c=[N(e.path)];else{c=[];for(const p of e.path)c.push(N(p))}let r;const s={};for(const p of c)try{const a=d.parse(R.readFileSync(p,{encoding:t}));d.populate(s,a,e)}catch(a){n&&M(`Failed to load ${p} ${a.message}`),r=a}let i=process.env;return e&&e.processEnv!=null&&(i=e.processEnv),d.populate(i,s,e),r?{parsed:s,error:r}:{parsed:s}}function te(e){if($(e).length===0)return d.configDotenv(e);const o=k(e);return o?d._configVault(e):(ee(`You set DOTENV_KEY but you are missing a .env.vault file at ${o}. Did you forget to build it?`),d.configDotenv(e))}function se(e,o){const t=Buffer.from(o.slice(-64),"hex");let n=Buffer.from(e,"base64");const c=n.subarray(0,12),r=n.subarray(-16);n=n.subarray(12,-16);try{const s=z.createDecipheriv("aes-256-gcm",t,c);return s.setAuthTag(r),`${s.update(n)}${s.final()}`}catch(s){const i=s instanceof RangeError,p=s.message==="Invalid key length",a=s.message==="Unsupported state or unable to authenticate data";if(i||p){const v=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw v.code="INVALID_DOTENV_KEY",v}else if(a){const v=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw v.code="DECRYPTION_FAILED",v}else throw s}}function ce(e,o,t={}){const n=!!(t&&t.debug),c=!!(t&&t.override);if(typeof o!="object"){const r=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw r.code="OBJECT_REQUIRED",r}for(const r of Object.keys(o))Object.prototype.hasOwnProperty.call(e,r)?(c===!0&&(e[r]=o[r]),n&&M(c===!0?`"${r}" is already defined and WAS overwritten`:`"${r}" is already defined and was NOT overwritten`)):e[r]=o[r]}const d={configDotenv:ne,_configVault:re,_parseVault:Z,config:te,decrypt:se,parse:X,populate:ce};f.exports.configDotenv=d.configDotenv;f.exports._configVault=d._configVault;f.exports._parseVault=d._parseVault;f.exports.config=d.config;f.exports.decrypt=d.decrypt;f.exports.parse=d.parse;f.exports.populate=d.populate;f.exports=d;var ie=f.exports;const ae=q(ie);async function le(e,o=3e4){const t=Date.now();for(;Date.now()-t<o;){try{if(E.existsSync(e)){const n=E.readFileSync(e,"utf-8");if(n.trim())return console.log(`File found: ${e}, content: ${n.trim()}`),n}}catch(n){console.log(`Error reading file ${e}:`,n)}await new Promise(n=>setTimeout(n,500))}throw new Error(`File ${e} not found or empty after ${o}ms`)}async function de(e){return new Promise(o=>{try{const c=(new B.URL(e).protocol==="https:"?K:x).get(e,r=>{console.log(`Server check: ${e} responded with status ${r.statusCode}`),o(r.statusCode!==void 0&&r.statusCode<500),c.destroy()});c.on("error",r=>{console.log(`Server check error for ${e}:`,r.message),o(!1),c.destroy()}),c.setTimeout(5e3,()=>{console.log(`Server check timeout for ${e}`),o(!1),c.destroy()})}catch(t){console.log(`Server check failed for ${e}:`,t),o(!1)}})}function V(){console.log("Creating window...");const e=process.env.NODE_ENV==="development"?g.join(process.cwd(),"dist/electron/preload.js"):g.join(__dirname,"preload.js");console.log("Preload script path:",e);const o=new l.BrowserWindow({width:1200,height:800,title:"Memory Dashboard",webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:e,webSecurity:!0,sandbox:!0,webgl:!1,additionalArguments:[`--memory-service-path=${process.env.VITE_MEMORY_SERVICE_PATH}`,`--memory-chroma-path=${process.env.VITE_MEMORY_CHROMA_PATH}`,`--memory-backups-path=${process.env.VITE_MEMORY_BACKUPS_PATH}`,`--claude-config-path=${process.env.VITE_CLAUDE_CONFIG_PATH}`]}});if(console.log("Environment variables:",{VITE_MEMORY_SERVICE_PATH:process.env.VITE_MEMORY_SERVICE_PATH,VITE_MEMORY_CHROMA_PATH:process.env.VITE_MEMORY_CHROMA_PATH,VITE_MEMORY_BACKUPS_PATH:process.env.VITE_MEMORY_BACKUPS_PATH,VITE_CLAUDE_CONFIG_PATH:process.env.VITE_CLAUDE_CONFIG_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH}),o.webContents.on("did-fail-load",(t,n,c)=>{console.error("Failed to load page:",c),o.reload()}),o.webContents.on("render-process-gone",(t,n)=>{console.error("Render process gone:",n.reason),n.reason==="crashed"&&(o.destroy(),V())}),o.webContents.on("did-finish-load",async()=>{console.log("Window finished loading"),await(async(c=3)=>{for(let r=0;r<c;r++)try{console.log(`Attempt ${r+1} to connect to memory service...`);const s=await o.webContents.executeJavaScript(`
            if (window.electronAPI && window.electronAPI.memory) {
              const health = await window.electronAPI.memory.check_database_health();
              console.log('Memory service health:', health);
              return health;
            } else {
              throw new Error('Memory API not available');
            }
          `);return console.log("Memory service connection successful:",s),!0}catch(s){console.error(`Memory service connection attempt ${r+1} failed:`,s),await new Promise(i=>setTimeout(i,2e3))}return!1})()||(console.error("Failed to connect to memory service after multiple attempts"),o.webContents.send("memory-service-error","Failed to connect to memory service"))}),process.env.NODE_ENV==="development")console.log("Running in development mode"),setTimeout(async()=>{try{const n=g.join(process.cwd(),".vite-port");console.log("Looking for port file at:",n);const r=`http://localhost:${(await le(n)).trim()}`;if(console.log("Development server URL:",r),!await(async(p=5)=>{for(;p>0;){try{if(console.log(`Attempting to connect to ${r} (${p} retries left)`),await de(r))return console.log("Successfully connected to development server"),!0}catch(a){console.log("Connection attempt failed:",a)}await new Promise(a=>setTimeout(a,1e3)),p--}return!1})())throw new Error("Failed to connect to development server after 5 attempts");console.log("Loading URL in window:",r),await o.loadURL(r)}catch(n){const c=n instanceof Error?n:new Error(String(n));console.error("Development server connection error:",c),o.isDestroyed()||o.webContents.send("dev-server-error",c.message),l.app.quit()}},1e3);else{console.log("Running in production mode");const t=g.join(__dirname,"../index.html");console.log("Loading file:",t),o.loadFile(t)}o.on("closed",()=>{console.log("Window closed"),o.destroy()}),o.webContents.on("before-input-event",(t,n)=>{n.control&&n.shift&&n.key.toLowerCase()==="i"&&o.webContents.toggleDevTools(),n.key==="F12"&&o.webContents.toggleDevTools()})}const L=g.join(process.cwd(),".env");console.log("Loading environment variables from:",L);const D=ae.config({path:L});D.error?console.error("Error loading .env file:",D.error):(console.log("Environment variables loaded successfully"),process.env.MCP_MEMORY_CHROMA_PATH=process.env.VITE_MEMORY_CHROMA_PATH,process.env.MCP_MEMORY_BACKUPS_PATH=process.env.VITE_MEMORY_BACKUPS_PATH,console.log("Set MCP environment variables:",{MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH}));l.app.disableHardwareAcceleration();l.app.commandLine.appendSwitch("disable-software-rasterizer");l.app.commandLine.appendSwitch("disable-gpu");l.app.commandLine.appendSwitch("disable-gpu-compositing");l.app.commandLine.appendSwitch("disable-gpu-sandbox");const pe=H.promisify(E.readFile),ue=H.promisify(E.exists);l.ipcMain.handle("fs:readFile",async(e,{path:o,options:t})=>{try{return console.log("Main process reading file:",o),await pe(o,t)}catch(n){throw console.error("Main process readFile error:",n),n}});l.ipcMain.handle("fs:exists",async(e,{path:o})=>{try{return console.log("Main process checking file exists:",o),await ue(o)}catch(t){return console.error("Main process exists error:",t),!1}});l.ipcMain.handle("mcp:use-tool",async(e,o)=>{const{server_name:t,tool_name:n,arguments:c}=o;console.log(`Forwarding MCP tool request: ${t}/${n}`,{args:c,cwd:process.cwd()});try{const r=process.env.VITE_CLAUDE_CONFIG_PATH;if(!r)throw new Error(`VITE_CLAUDE_CONFIG_PATH environment variable not set. Available env vars: ${Object.keys(process.env).filter(C=>C.startsWith("VITE_")).join(", ")}`);console.log("Reading MCP config from:",r);const s=JSON.parse(E.readFileSync(r,"utf-8"));console.log("Available MCP servers:",Object.keys(s.mcpServers));const i=s.mcpServers[t];if(!i)throw new Error(`MCP server "${t}" not found in configuration. Available servers: ${Object.keys(s.mcpServers).join(", ")}`);const{spawn:p}=require("child_process");console.log("Spawning MCP server process:",{command:i.command,args:i.args,cwd:process.env.VITE_MEMORY_SERVICE_PATH,env:Object.keys({...process.env,...i.env})});const a=p(i.command,i.args,{env:{...process.env,...i.env,PYTHONPATH:process.env.VITE_MEMORY_SERVICE_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH||process.env.VITE_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH||process.env.VITE_MEMORY_BACKUPS_PATH},cwd:process.env.VITE_MEMORY_SERVICE_PATH,stdio:["pipe","pipe","pipe"]});console.log("MCP server process spawned with:",{pid:a.pid,command:i.command,args:i.args,cwd:process.env.VITE_MEMORY_SERVICE_PATH,env:{PYTHONPATH:process.env.VITE_MEMORY_SERVICE_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH||process.env.VITE_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH||process.env.VITE_MEMORY_BACKUPS_PATH}});const v={jsonrpc:"2.0",method:"initialize",params:{protocolVersion:"2024-11-05",capabilities:{tools:{}},clientInfo:{name:"mcp-memory-dashboard",version:"0.1.0"}},id:1};return console.log("Sending MCP initialize request:",v),a.stdin.write(JSON.stringify(v)+`
`),new Promise((C,m)=>{let h="",w=!1,T=!1;const S={jsonrpc:"2.0",method:"tools/call",params:{name:n,arguments:c},id:2};a.stdout.on("data",_=>{const P=_.toString();console.log("Raw MCP server response:",P),h+=P;const A=h.split(`
`);for(let y=0;y<A.length-1;y++){const O=A[y].trim();if(!(!O||T))try{const u=JSON.parse(O);if(console.log("Parsed MCP response:",u),u.jsonrpc==="2.0"&&typeof u.id<"u"){if(u.id===1&&!w){if(u.error){console.error("MCP initialization failed:",u.error),m(new Error(u.error.message||JSON.stringify(u.error))),a.kill();return}console.log("MCP initialization successful:",u.result),w=!0;const b={jsonrpc:"2.0",method:"notifications/initialized"};console.log("Sending initialized notification:",b),a.stdin.write(JSON.stringify(b)+`
`),console.log("Sending tool request:",S),a.stdin.write(JSON.stringify(S)+`
`);continue}if(u.id===2&&w){T=!0,u.error?(console.error("MCP tool call failed:",u.error),m(new Error(u.error.message||JSON.stringify(u.error)))):(console.log("MCP tool call successful:",u.result),C(u.result)),a.kill();return}}}catch{console.log("Non-JSON line (probably diagnostic):",O)}}h=A[A.length-1]}),a.stderr.on("data",_=>{console.error("MCP server stderr:",_.toString())}),a.on("error",_=>{console.error("Failed to start MCP server:",_),m(new Error(`Failed to start MCP server: ${_.message}`))}),a.on("exit",(_,P)=>{_!==0&&_!==null&&(console.error(`MCP server exited with code ${_}, signal ${P}`),m(new Error(`MCP server exited with code ${_}`)))}),setTimeout(()=>{T||(console.error("MCP server request timed out after 60 seconds"),console.error("Init complete:",w),console.error("Final accumulated response:",h),a.kill(),m(new Error("MCP server request timed out")))},6e4)})}catch(r){throw console.error("Error handling MCP tool request:",r instanceof Error?r.message:r),r}});l.app.whenReady().then(()=>{console.log("App is ready, creating window..."),V()});l.app.on("window-all-closed",()=>{console.log("All windows closed"),process.platform!=="darwin"&&l.app.quit()});l.app.on("activate",()=>{console.log("App activated"),l.BrowserWindow.getAllWindows().length===0&&V()});const _e=l.app.requestSingleInstanceLock();_e?l.app.on("second-instance",()=>{const e=l.BrowserWindow.getAllWindows()[0];e&&(e.isMinimized()&&e.restore(),e.focus())}):l.app.quit();
