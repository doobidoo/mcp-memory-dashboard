"use strict";var L=Object.defineProperty;var K=(s,e,t)=>e in s?L(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var N=(s,e,t)=>K(s,typeof e!="symbol"?e+"":e,t);const l=require("electron"),R=require("path"),C=require("fs"),F=require("os"),j=require("crypto"),W=require("http"),J=require("https"),G=require("url"),x=require("util");function Q(s){return s&&s.__esModule&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s}var M={exports:{}};const X="16.5.0",Z={version:X};var q;function ee(){if(q)return M.exports;q=1;const s=C,e=R,t=F,o=j,i=Z.version,y=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function f(r){const n={};let c=r.toString();c=c.replace(/\r\n?/mg,`
`);let p;for(;(p=y.exec(c))!=null;){const _=p[1];let a=p[2]||"";a=a.trim();const d=a[0];a=a.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),d==='"'&&(a=a.replace(/\\n/g,`
`),a=a.replace(/\\r/g,"\r")),n[_]=a}return n}function A(r){const n=O(r),c=h.configDotenv({path:n});if(!c.parsed){const d=new Error(`MISSING_DATA: Cannot parse ${n} for an unknown reason`);throw d.code="MISSING_DATA",d}const p=D(r).split(","),_=p.length;let a;for(let d=0;d<_;d++)try{const m=p[d].trim(),E=T(c,m);a=h.decrypt(E.ciphertext,E.key);break}catch(m){if(d+1>=_)throw m}return h.parse(a)}function g(r){console.log(`[dotenv@${i}][WARN] ${r}`)}function P(r){console.log(`[dotenv@${i}][DEBUG] ${r}`)}function D(r){return r&&r.DOTENV_KEY&&r.DOTENV_KEY.length>0?r.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function T(r,n){let c;try{c=new URL(n)}catch(m){if(m.code==="ERR_INVALID_URL"){const E=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw E.code="INVALID_DOTENV_KEY",E}throw m}const p=c.password;if(!p){const m=new Error("INVALID_DOTENV_KEY: Missing key part");throw m.code="INVALID_DOTENV_KEY",m}const _=c.searchParams.get("environment");if(!_){const m=new Error("INVALID_DOTENV_KEY: Missing environment part");throw m.code="INVALID_DOTENV_KEY",m}const a=`DOTENV_VAULT_${_.toUpperCase()}`,d=r.parsed[a];if(!d){const m=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${a} in your .env.vault file.`);throw m.code="NOT_FOUND_DOTENV_ENVIRONMENT",m}return{ciphertext:d,key:p}}function O(r){let n=null;if(r&&r.path&&r.path.length>0)if(Array.isArray(r.path))for(const c of r.path)s.existsSync(c)&&(n=c.endsWith(".vault")?c:`${c}.vault`);else n=r.path.endsWith(".vault")?r.path:`${r.path}.vault`;else n=e.resolve(process.cwd(),".env.vault");return s.existsSync(n)?n:null}function b(r){return r[0]==="~"?e.join(t.homedir(),r.slice(1)):r}function V(r){!!(r&&r.debug)&&P("Loading env from encrypted .env.vault");const c=h._parseVault(r);let p=process.env;return r&&r.processEnv!=null&&(p=r.processEnv),h.populate(p,c,r),{parsed:c}}function Y(r){const n=e.resolve(process.cwd(),".env");let c="utf8";const p=!!(r&&r.debug);r&&r.encoding?c=r.encoding:p&&P("No encoding is specified. UTF-8 is used by default");let _=[n];if(r&&r.path)if(!Array.isArray(r.path))_=[b(r.path)];else{_=[];for(const E of r.path)_.push(b(E))}let a;const d={};for(const E of _)try{const H=h.parse(s.readFileSync(E,{encoding:c}));h.populate(d,H,r)}catch(H){p&&P(`Failed to load ${E} ${H.message}`),a=H}let m=process.env;return r&&r.processEnv!=null&&(m=r.processEnv),h.populate(m,d,r),a?{parsed:d,error:a}:{parsed:d}}function v(r){if(D(r).length===0)return h.configDotenv(r);const n=O(r);return n?h._configVault(r):(g(`You set DOTENV_KEY but you are missing a .env.vault file at ${n}. Did you forget to build it?`),h.configDotenv(r))}function I(r,n){const c=Buffer.from(n.slice(-64),"hex");let p=Buffer.from(r,"base64");const _=p.subarray(0,12),a=p.subarray(-16);p=p.subarray(12,-16);try{const d=o.createDecipheriv("aes-256-gcm",c,_);return d.setAuthTag(a),`${d.update(p)}${d.final()}`}catch(d){const m=d instanceof RangeError,E=d.message==="Invalid key length",H=d.message==="Unsupported state or unable to authenticate data";if(m||E){const k=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw k.code="INVALID_DOTENV_KEY",k}else if(H){const k=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw k.code="DECRYPTION_FAILED",k}else throw d}}function S(r,n,c={}){const p=!!(c&&c.debug),_=!!(c&&c.override);if(typeof n!="object"){const a=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw a.code="OBJECT_REQUIRED",a}for(const a of Object.keys(n))Object.prototype.hasOwnProperty.call(r,a)?(_===!0&&(r[a]=n[a]),p&&P(_===!0?`"${a}" is already defined and WAS overwritten`:`"${a}" is already defined and was NOT overwritten`)):r[a]=n[a]}const h={configDotenv:Y,_configVault:V,_parseVault:A,config:v,decrypt:I,parse:f,populate:S};return M.exports.configDotenv=h.configDotenv,M.exports._configVault=h._configVault,M.exports._parseVault=h._parseVault,M.exports.config=h.config,M.exports.decrypt=h.decrypt,M.exports.parse=h.parse,M.exports.populate=h.populate,M.exports=h,M.exports}var re=ee();const te=Q(re);async function oe(s,e=3e4){const t=Date.now();for(;Date.now()-t<e;){try{if(C.existsSync(s)){const o=C.readFileSync(s,"utf-8");if(o.trim())return console.log(`File found: ${s}, content: ${o.trim()}`),o}}catch(o){console.log(`Error reading file ${s}:`,o)}await new Promise(o=>setTimeout(o,500))}throw new Error(`File ${s} not found or empty after ${e}ms`)}async function ne(s){return new Promise(e=>{try{const u=(new G.URL(s).protocol==="https:"?J:W).get(s,i=>{console.log(`Server check: ${s} responded with status ${i.statusCode}`),e(i.statusCode!==void 0&&i.statusCode<500),u.destroy()});u.on("error",i=>{console.log(`Server check error for ${s}:`,i.message),e(!1),u.destroy()}),u.setTimeout(5e3,()=>{console.log(`Server check timeout for ${s}`),e(!1),u.destroy()})}catch(t){console.log(`Server check failed for ${s}:`,t),e(!1)}})}function B(){console.log("Creating window...");const s=process.env.NODE_ENV==="development"?R.join(process.cwd(),"dist/electron/preload.js"):R.join(__dirname,"preload.js");console.log("Preload script path:",s);const e=new l.BrowserWindow({width:1200,height:800,title:"Memory Dashboard",webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:s,webSecurity:!0,sandbox:!0,webgl:!1,additionalArguments:[`--memory-service-path=${process.env.VITE_MEMORY_SERVICE_PATH}`,`--memory-chroma-path=${process.env.VITE_MEMORY_CHROMA_PATH}`,`--memory-backups-path=${process.env.VITE_MEMORY_BACKUPS_PATH}`,`--claude-config-path=${process.env.VITE_CLAUDE_CONFIG_PATH}`]}});if(console.log("Environment variables:",{VITE_MEMORY_SERVICE_PATH:process.env.VITE_MEMORY_SERVICE_PATH,VITE_MEMORY_CHROMA_PATH:process.env.VITE_MEMORY_CHROMA_PATH,VITE_MEMORY_BACKUPS_PATH:process.env.VITE_MEMORY_BACKUPS_PATH,VITE_CLAUDE_CONFIG_PATH:process.env.VITE_CLAUDE_CONFIG_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH}),e.webContents.on("did-fail-load",(t,o,u)=>{console.error("Failed to load page:",u),e.reload()}),e.webContents.on("render-process-gone",(t,o)=>{console.error("Render process gone:",o.reason),o.reason==="crashed"&&(e.destroy(),B())}),e.webContents.on("did-finish-load",async()=>{console.log("Window finished loading"),await(async(u=3)=>{for(let i=0;i<u;i++)try{console.log(`Attempt ${i+1} to connect to memory service...`);const y=await e.webContents.executeJavaScript(`
            if (window.electronAPI && window.electronAPI.memory) {
              const health = await window.electronAPI.memory.check_database_health();
              console.log('Memory service health:', health);
              return health;
            } else {
              throw new Error('Memory API not available');
            }
          `);return console.log("Memory service connection successful:",y),!0}catch(y){console.error(`Memory service connection attempt ${i+1} failed:`,y),await new Promise(f=>setTimeout(f,2e3))}return!1})()||(console.error("Failed to connect to memory service after multiple attempts"),e.webContents.send("memory-service-error","Failed to connect to memory service"))}),process.env.NODE_ENV==="development")console.log("Running in development mode"),setTimeout(async()=>{try{const o=R.join(process.cwd(),".vite-port");console.log("Looking for port file at:",o);const i=`http://localhost:${(await oe(o)).trim()}`;if(console.log("Development server URL:",i),!await(async(A=5)=>{for(;A>0;){try{if(console.log(`Attempting to connect to ${i} (${A} retries left)`),await ne(i))return console.log("Successfully connected to development server"),!0}catch(g){console.log("Connection attempt failed:",g)}await new Promise(g=>setTimeout(g,1e3)),A--}return!1})())throw new Error("Failed to connect to development server after 5 attempts");console.log("Loading URL in window:",i),await e.loadURL(i)}catch(o){const u=o instanceof Error?o:new Error(String(o));console.error("Development server connection error:",u),e.isDestroyed()||e.webContents.send("dev-server-error",u.message),l.app.quit()}},1e3);else{console.log("Running in production mode");const t=R.join(__dirname,"../index.html");console.log("Loading file:",t),e.loadFile(t)}e.on("closed",()=>{console.log("Window closed"),e.destroy()}),e.webContents.on("before-input-event",(t,o)=>{o.control&&o.shift&&o.key.toLowerCase()==="i"&&e.webContents.toggleDevTools(),o.key==="F12"&&e.webContents.toggleDevTools()})}class se{constructor(e){N(this,"config");N(this,"client",null);N(this,"collection",null);N(this,"isInitialized",!1);this.config=e,console.log("DirectChromaHandler initialized with config:",e)}setupIpcHandlers(){console.log("Setting up direct ChromaDB IPC handlers..."),l.ipcMain.handle("direct-chroma:store",async(e,{content:t,metadata:o})=>await this.storeMemory(t,o)),l.ipcMain.handle("direct-chroma:retrieve",async(e,{query:t,n_results:o})=>await this.retrieveMemory(t,o)),l.ipcMain.handle("direct-chroma:search-by-tag",async(e,{tags:t})=>await this.searchByTag(t)),l.ipcMain.handle("direct-chroma:delete-by-tag",async(e,{tag:t})=>await this.deleteByTag(t)),l.ipcMain.handle("direct-chroma:get-stats",async(e,{})=>await this.getStats()),l.ipcMain.handle("direct-chroma:check-health",async(e,{})=>await this.checkHealth()),l.ipcMain.handle("direct-chroma:optimize",async(e,{})=>await this.optimizeDatabase()),l.ipcMain.handle("direct-chroma:backup",async(e,{})=>await this.createBackup())}async handleDirectRequest(e,t){switch(console.log(`Direct request: ${e}`,t),e){case"direct-chroma:store":return await this.storeMemory(t.content,t.metadata);case"direct-chroma:retrieve":return await this.retrieveMemory(t.query,t.n_results);case"direct-chroma:search-by-tag":return await this.searchByTag(t.tags);case"direct-chroma:delete-by-tag":return await this.deleteByTag(t.tag);case"direct-chroma:get-stats":return await this.getStats();case"direct-chroma:check-health":return await this.checkHealth();case"direct-chroma:optimize":return await this.optimizeDatabase();case"direct-chroma:backup":return await this.createBackup();default:throw new Error(`Unknown operation: ${e}`)}}async initializeClient(){if(!this.isInitialized)try{throw console.log("Initializing direct ChromaDB client..."),new Error("Direct ChromaDB access is experimental and not yet fully implemented. Please set VITE_USE_DIRECT_CHROMA_ACCESS=false to use the stable MCP service approach. GitHub Issue #11 Phase 2 implementation is in progress.");C.existsSync(this.config.chromaPath)||(console.log("Creating ChromaDB directory:",this.config.chromaPath),C.mkdirSync(this.config.chromaPath,{recursive:!0})),C.existsSync(this.config.backupsPath)||(console.log("Creating backups directory:",this.config.backupsPath),C.mkdirSync(this.config.backupsPath,{recursive:!0})),console.log("Direct ChromaDB client initialized successfully"),this.isInitialized=!0}catch(e){throw console.error("Failed to initialize ChromaDB client:",e),new Error(`Direct ChromaDB access not ready: ${e instanceof Error?e.message:"Unknown error"}`)}}async storeMemory(e,t){await this.initializeClient();try{return console.log("Storing memory (placeholder):",{content:e,metadata:t}),{success:!0,id:`memory_${Date.now()}`,message:"Memory stored successfully (placeholder implementation)"}}catch(o){throw console.error("Error storing memory:",o),o}}async retrieveMemory(e,t=5){await this.initializeClient();try{return console.log("Retrieving memory (placeholder):",{query:e,nResults:t}),{memories:[{id:"placeholder_1",content:`Placeholder memory result for query: "${e}"`,metadata:{tags:["placeholder"],type:"test"},distance:.1}]}}catch(o){throw console.error("Error retrieving memory:",o),o}}async searchByTag(e){await this.initializeClient();try{return console.log("Searching by tag (placeholder):",e),{memories:[{id:"tag_placeholder_1",content:`Placeholder memory with tags: ${e.join(", ")}`,metadata:{tags:e,type:"test"}}]}}catch(t){throw console.error("Error searching by tag:",t),t}}async deleteByTag(e){await this.initializeClient();try{return console.log("Deleting by tag (placeholder):",e),{success:!0,deleted_count:0,message:"Delete operation completed (placeholder implementation)"}}catch(t){throw console.error("Error deleting by tag:",t),t}}async getStats(){await this.initializeClient();try{return console.log("Getting stats (placeholder)"),{total_memories:0,unique_tags:0}}catch(e){return console.error("Error getting stats:",e),{total_memories:0,unique_tags:0}}}async checkHealth(){await this.initializeClient();try{return console.log("Checking health (placeholder)"),{health:1,avg_query_time:50,status:"healthy"}}catch(e){return console.error("Error checking health:",e),{health:0,avg_query_time:0,status:"error"}}}async optimizeDatabase(){await this.initializeClient();try{return console.log("Optimizing database (placeholder)"),{success:!0,message:"Database optimization completed (placeholder implementation)"}}catch(e){throw console.error("Error optimizing database:",e),e}}async createBackup(){await this.initializeClient();try{console.log("Creating backup (placeholder)");const t=`backup_${new Date().toISOString().replace(/[:.]/g,"-")}`;return{success:!0,backup_name:t,backup_path:R.join(this.config.backupsPath,t),message:"Backup created successfully (placeholder implementation)"}}catch(e){throw console.error("Error creating backup:",e),e}}}const z=R.join(process.cwd(),".env");console.log("Loading environment variables from:",z);const U=te.config({path:z});U.error?console.error("Error loading .env file:",U.error):(console.log("Environment variables loaded successfully"),process.env.MCP_MEMORY_CHROMA_PATH=process.env.VITE_MEMORY_CHROMA_PATH,process.env.MCP_MEMORY_BACKUPS_PATH=process.env.VITE_MEMORY_BACKUPS_PATH,console.log("Set MCP environment variables:",{MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH}));let w=null;const $=process.env.VITE_USE_DIRECT_CHROMA_ACCESS==="true";console.log("Direct ChromaDB access enabled:",$);if($){const s=process.env.VITE_MEMORY_CHROMA_PATH||process.env.MCP_MEMORY_CHROMA_PATH,e=process.env.VITE_MEMORY_BACKUPS_PATH||process.env.MCP_MEMORY_BACKUPS_PATH;s&&e?(w=new se({chromaPath:s,backupsPath:e}),console.log("✅ Initialized Direct ChromaDB Handler - Eliminates MCP service duplication")):console.warn("⚠️  Direct ChromaDB access requested but paths not configured")}l.app.disableHardwareAcceleration();l.app.commandLine.appendSwitch("disable-software-rasterizer");l.app.commandLine.appendSwitch("disable-gpu");l.app.commandLine.appendSwitch("disable-gpu-compositing");l.app.commandLine.appendSwitch("disable-gpu-sandbox");const ae=x.promisify(C.readFile),ce=x.promisify(C.exists);l.ipcMain.handle("fs:readFile",async(s,{path:e,options:t})=>{try{return console.log("Main process reading file:",e),await ae(e,t)}catch(o){throw console.error("Main process readFile error:",o),o}});l.ipcMain.handle("fs:exists",async(s,{path:e})=>{try{return console.log("Main process checking file exists:",e),await ce(e)}catch(t){return console.error("Main process exists error:",t),!1}});l.ipcMain.handle("mcp:use-tool",async(s,e)=>{const{server_name:t,tool_name:o,arguments:u}=e;if(console.log(`Handling MCP tool request: ${t}/${o}`,{args:u,useDirectAccess:$}),$&&w&&t==="memory"){console.log("🚀 Using Direct ChromaDB Access - No MCP service spawning");try{switch(o){case"store_memory":return await w.handleDirectRequest("direct-chroma:store",u);case"dashboard_retrieve_memory":case"retrieve_memory":return await w.handleDirectRequest("direct-chroma:retrieve",u);case"dashboard_search_by_tag":case"search_by_tag":return await w.handleDirectRequest("direct-chroma:search-by-tag",u);case"delete_by_tag":return await w.handleDirectRequest("direct-chroma:delete-by-tag",u);case"dashboard_get_stats":case"get_stats":return await w.handleDirectRequest("direct-chroma:get-stats",u);case"dashboard_check_health":case"check_database_health":return await w.handleDirectRequest("direct-chroma:check-health",u);case"dashboard_optimize_db":case"optimize_db":return await w.handleDirectRequest("direct-chroma:optimize",u);case"dashboard_create_backup":case"create_backup":return await w.handleDirectRequest("direct-chroma:backup",u);default:throw new Error(`Unsupported tool: ${o}`)}}catch(i){console.error("Direct ChromaDB access error, falling back to MCP:",i)}}console.log("⚠️  Using MCP service spawning approach");try{const i=process.env.VITE_CLAUDE_CONFIG_PATH;if(!i)throw new Error(`VITE_CLAUDE_CONFIG_PATH environment variable not set. Available env vars: ${Object.keys(process.env).filter(D=>D.startsWith("VITE_")).join(", ")}`);console.log("Reading MCP config from:",i);const y=JSON.parse(C.readFileSync(i,"utf-8"));console.log("Available MCP servers:",Object.keys(y.mcpServers));const f=y.mcpServers[t];if(!f)throw new Error(`MCP server "${t}" not found in configuration. Available servers: ${Object.keys(y.mcpServers).join(", ")}`);const{spawn:A}=require("child_process");console.log("Spawning MCP server process:",{command:f.command,args:f.args,cwd:process.env.VITE_MEMORY_SERVICE_PATH,env:Object.keys({...process.env,...f.env})});const g=A(f.command,f.args,{env:{...process.env,...f.env,PYTHONPATH:process.env.VITE_MEMORY_SERVICE_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH||process.env.VITE_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH||process.env.VITE_MEMORY_BACKUPS_PATH},cwd:process.env.VITE_MEMORY_SERVICE_PATH,stdio:["pipe","pipe","pipe"]});console.log("MCP server process spawned with:",{pid:g.pid,command:f.command,args:f.args,cwd:process.env.VITE_MEMORY_SERVICE_PATH,env:{PYTHONPATH:process.env.VITE_MEMORY_SERVICE_PATH,MCP_MEMORY_CHROMA_PATH:process.env.MCP_MEMORY_CHROMA_PATH||process.env.VITE_MEMORY_CHROMA_PATH,MCP_MEMORY_BACKUPS_PATH:process.env.MCP_MEMORY_BACKUPS_PATH||process.env.VITE_MEMORY_BACKUPS_PATH}});const P={jsonrpc:"2.0",method:"initialize",params:{protocolVersion:"2024-11-05",capabilities:{tools:{}},clientInfo:{name:"mcp-memory-dashboard",version:"0.1.0"}},id:1};return console.log("Sending MCP initialize request:",P),g.stdin.write(JSON.stringify(P)+`
`),new Promise((D,T)=>{let O="",b=!1,V=!1;const Y={jsonrpc:"2.0",method:"tools/call",params:{name:o,arguments:u},id:2};g.stdout.on("data",v=>{const I=v.toString();console.log("Raw MCP server response:",I),O+=I;const S=O.split(`
`);for(let h=0;h<S.length-1;h++){const r=S[h].trim();if(!(!r||V))try{const n=JSON.parse(r);if(console.log("Parsed MCP response:",n),n.jsonrpc==="2.0"&&typeof n.id<"u"){if(n.id===1&&!b){if(n.error){console.error("MCP initialization failed:",n.error),T(new Error(n.error.message||JSON.stringify(n.error))),g.kill();return}console.log("MCP initialization successful:",n.result),b=!0;const c={jsonrpc:"2.0",method:"notifications/initialized"};console.log("Sending initialized notification:",c),g.stdin.write(JSON.stringify(c)+`
`),console.log("Sending tool request:",Y),g.stdin.write(JSON.stringify(Y)+`
`);continue}if(n.id===2&&b){V=!0,n.error?(console.error("MCP tool call failed:",n.error),T(new Error(n.error.message||JSON.stringify(n.error)))):(console.log("MCP tool call successful:",n.result),D(n.result)),g.kill();return}}}catch{console.log("Non-JSON line (probably diagnostic):",r)}}O=S[S.length-1]}),g.stderr.on("data",v=>{console.error("MCP server stderr:",v.toString())}),g.on("error",v=>{console.error("Failed to start MCP server:",v),T(new Error(`Failed to start MCP server: ${v.message}`))}),g.on("exit",(v,I)=>{v!==0&&v!==null&&(console.error(`MCP server exited with code ${v}, signal ${I}`),T(new Error(`MCP server exited with code ${v}`)))}),setTimeout(()=>{V||(console.error("MCP server request timed out after 60 seconds"),console.error("Init complete:",b),console.error("Final accumulated response:",O),g.kill(),T(new Error("MCP server request timed out")))},6e4)})}catch(i){throw console.error("Error handling MCP tool request:",i instanceof Error?i.message:i),i}});l.app.whenReady().then(()=>{console.log("App is ready, creating window..."),w&&(w.setupIpcHandlers(),console.log("✅ Direct ChromaDB IPC handlers initialized")),B()});l.app.on("window-all-closed",()=>{console.log("All windows closed"),process.platform!=="darwin"&&l.app.quit()});l.app.on("activate",()=>{console.log("App activated"),l.BrowserWindow.getAllWindows().length===0&&B()});const ie=l.app.requestSingleInstanceLock();ie?l.app.on("second-instance",()=>{const s=l.BrowserWindow.getAllWindows()[0];s&&(s.isMinimized()&&s.restore(),s.focus())}):l.app.quit();
