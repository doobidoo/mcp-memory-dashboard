"use strict";const t=require("electron"),n=require("fs"),i=require("util"),l=i.promisify(n.readFile),a=i.promisify(n.exists);console.log("Preload script starting...");const y={use_mcp_tool:async({server_name:e,tool_name:r,arguments:s})=>{try{return console.log(`Calling MCP tool: ${e}/${r}`,s),await t.ipcRenderer.invoke("mcp:use-tool",{server_name:e,tool_name:r,arguments:s})}catch(c){throw console.error(`MCP tool error (${e}/${r}):`,c),c}}};let o=null;try{console.log("Initializing memory service...");const{MemoryService:e}=require("../src/services/memory");o=new e(y),console.log("Memory service initialized successfully")}catch(e){const r=e instanceof Error?e.message:"Unknown error";console.error("Failed to initialize memory service:",r),t.ipcRenderer.send("service-error",{service:"memory",error:r})}o?t.ipcRenderer.send("service-status",{memory:!0}):(console.error("Memory service not available"),t.ipcRenderer.send("service-status",{memory:!1}));t.contextBridge.exposeInMainWorld("electronAPI",{memory:o?{store_memory:async(e,r)=>(console.log("Storing memory:",{content:e,metadata:r}),o.store_memory({content:e,metadata:r})),retrieve_memory:async(e,r)=>(console.log("Retrieving memory:",{query:e,n_results:r}),o.retrieve_memory({query:e,n_results:r})),search_by_tag:async e=>(console.log("Searching by tags:",e),o.search_by_tag({tags:e})),delete_by_tag:async e=>(console.log("Deleting by tag:",e),o.delete_by_tag({tag:e})),check_database_health:async()=>(console.log("Checking database health"),o.check_database_health()),get_stats:async()=>(console.log("Getting stats"),o.get_stats()),optimize_db:async()=>(console.log("Optimizing database"),o.optimize_db()),create_backup:async()=>(console.log("Creating backup"),o.create_backup())}:null,fs:{readFile:async(e,r)=>{console.log("readFile called with path:",e);try{const s=await l(e,r);return console.log("readFile successful"),s}catch(s){throw console.error("readFile error:",s),s}},exists:async e=>{console.log("exists called with path:",e);try{const r=await a(e);return console.log("exists check result:",r),r}catch(r){return console.error("exists check error:",r),!1}}}});console.log("Preload script finished exposing APIs");
